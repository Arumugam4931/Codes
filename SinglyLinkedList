import java.util.Iterator;
class LinkedList<T> implements Iterable<T>
{
    Node head;
    class Node
    {
        T data;
        Node next;
        
        Node(T x)
        {
            data=x;
            next=null;
        }
        
    }
    // LinkedList()
    // {
    //     head=null;
    // }
    public void insertAtBegining(T data)
    {
        Node new_node=new Node(data);
        
        if(head==null)
        {
            head=new_node;
        }
        else
        {
            new_node.next=head;
            head=new_node;
        }
    }
    public void insert(T data)
    {
        Node new_node=new Node(data);
        
        if(head==null)
        {
            head=new_node;
        }
        else
        {
            Node last=head;
            while(last.next!=null)
            {
                last=last.next;
            }
            last.next=new_node;
        }
    }
    public void insertAtposition(int pos,T data)
    {
        if(pos==0)
        {
            insertAtBegining(data);
        }
        Node new_node=new Node(data);
        Node temp=head;
        for(int i=1;i<pos;i++)
        {
            temp=temp.next;
        }
        new_node.next=temp.next;
        temp.next=new_node;
    }
    public void delete(int pos)
    {
        Node temp=head;
        Node prev=head;
        if(head==null)
        {
           throw new IndexOutOfBoundsException("Invalid");
        }
        if(pos==0)
        {
            head=head.next;
            return;
        }
        for(int i=1;i<=pos;i++)
        {
            prev=temp;
            temp=temp.next;
        }
        prev.next=temp.next;
    }
    public void deleteAtEnd()
    {
            Node last=head;
            Node prev=head;
            while(last.next!=null)
            {
                prev=last;
                last=last.next;
            }
            prev.next=null;
    }
    public void get(int pos)
    {
        Node temp = head;
        for(int i=0;i<pos;i++)
        {
            temp=temp.next;
        }
        System.out.println(temp.data);
    }
    public void update(int pos,T data)
    {
        Node temp = head;
        for(int i=0;i<pos;i++)
        {
            temp=temp.next;
        }
        temp.data=data;
    }
    public int search(T x)
    {
        Node temp=head;
        if(temp.data==x)
        {
            return 0;
        }
        int count=0;
        while(temp.next!=null)
        {
            count++;
            temp=temp.next;
            if(temp.data==x)
            {
                return count;
            }
        }
        
        return -1;
    }
    public void display()
    {
        Node currNode=head;
        while(currNode!=null)
        {
            System.out.println(currNode.data+" ");
            currNode=currNode.next;
        }
    }
    
    public Iterator<T> iterator()
    {
        
        return new Iterator<T>()
        {
            
            Node temp=head;
            public boolean hasNext()
            {
                return temp!=null;
            }
            public T next()
            {
                T val=temp.data;
                temp=temp.next;
                return val;
            }
        };
    }
    public void reverse()
    {
        Node prev=null;
        Node current=head;
        Node next=head.next;
        while(current!=null)
        {
            next=current.next;
            current.next=prev;
            prev=current;
            current=next;
        }
        
        head = prev;
    }
}
public class Main
{
	public static void main(String[] args) 
	{
		LinkedList<String> list=new LinkedList<String>();
		list.insert("A");
		list.insert("r");
		list.insert("u");
		list.insert("m");
		list.insert("u");
		list.insert("g");
		list.reverse();
		for(String x:list)
		{
		    System.out.println(x);
		}
// // 		list.insertAtposition(0,10);
// // 		list.delete(0);
// // 		list.get(5);
// // 		list.update(5,5);
// 		//list.deleteAtEnd();
// 		System.out.println(list.search("Arumugam"));
// 		list.display();
	}
}




